# 3.
# Вам дана матричная сетка размера m x n,
# состоящая из положительных целых чисел.
#
# Выполняйте следующую операцию, пока сетка не станет пустой:
#
# Удалите элемент с наибольшим значением из каждой строки.
# Если существует несколько таких элементов, удалите любой из них.
# Добавьте к ответу максимальный из удаленных элементов.
# Обратите внимание, что количество столбцов уменьшается на
# один после каждой операции.
#
# Верните ответ после выполнения операций, описанных выше.
#
# Пример: [[1, 2, !4!], => [[1, !2!], => [[!1!], => [[],
#          [!3!, 3, 1]] =>  [!3!, 1]] =>  [!1!]] =>  []]
#             0 + 4   ||   4 + 3  ||  7 + 1 => Ответ: 8




# 8.
# Вам дана целочисленная матричная сетка размера n x n.
#
# Создайте целочисленную матрицу max_local размера
# (n - 2) x (n - 2), такую, что:
#
# max_local[i][j] равно наибольшему значению матрицы
# 3 x 3 в сетке с центром вокруг строки i + 1 и столбца j + 1.
# Другими словами, мы хотим найти наибольшее значение
# в каждой непрерывной матрице 3 x 3 в сетке.
#
# Верните сгенерированную матрицу.
from random import randint


def maxline(matrix):
    return matrix.index(max(matrix, key=sum))


def prn_matrix(matrix):
    for line in matrix:
        print(*line)


i = int(input('Число столбцов: '))
j = int(input('число строк: '))

m = [[randint(0, 9) for _ in range(i)] for _ in range(j)]

prn_matrix(m)
print("")
m.pop(maxline(m))
prn_matrix(m)

